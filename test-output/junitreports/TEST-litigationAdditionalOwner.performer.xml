<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitReportReporter -->
<testsuite hostname="DESKTOP-LP" failures="0" tests="113" name="litigationAdditionalOwner.performer" time="175.451" errors="2" timestamp="2023-11-27T11:30:30 IST" skipped="110">
  <testcase classname="litigationAdditionalOwner.performer" name="ImportUtility" time="118.495"/>
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="Close" time="23.385">
    <error message="disconnected: not connected to DevTools
  (failed to check if window was closed: disconnected: not connected to DevTools)
  (Session info: chrome=119.0.6045.160)
Build info: version: &#039;3.141.0&#039;, revision: &#039;2ecb7d9a&#039;, time: &#039;2018-10-31T20:09:30&#039;
System info: host: &#039;DESKTOP-LP&#039;, ip: &#039;172.19.16.1&#039;, os.name: &#039;Windows 10&#039;, os.arch: &#039;amd64&#039;, os.version: &#039;10.0&#039;, java.version: &#039;20&#039;
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 119.0.6045.160, chrome: {chromedriverVersion: 119.0.6045.105 (38c72552c5e..., userDataDir: C:\Users\SNEHAL~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:59894}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 598c2f4a178c7db5cb0902206a9b7e6e" type="org.openqa.selenium.WebDriverException">
      <![CDATA[org.openqa.selenium.WebDriverException: disconnected: not connected to DevTools
  (failed to check if window was closed: disconnected: not connected to DevTools)
  (Session info: chrome=119.0.6045.160)
Build info: version: '3.141.0', revision: '2ecb7d9a', time: '2018-10-31T20:09:30'
System info: host: 'DESKTOP-LP', ip: '172.19.16.1', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '20'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 119.0.6045.160, chrome: {chromedriverVersion: 119.0.6045.105 (38c72552c5e..., userDataDir: C:\Users\SNEHAL~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:59894}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 598c2f4a178c7db5cb0902206a9b7e6e
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:67)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:484)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:609)
at org.openqa.selenium.remote.RemoteWebDriver.close(RemoteWebDriver.java:442)
at litigationAdditionalOwner.performer.Close(performer.java:1588)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:385)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:321)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:700)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:676)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:660)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
    </error>
  </testcase> <!-- Close -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="AdvancedSearch" time="33.571">
    <error message="no such window: target window already closed
from unknown error: web view not found
  (Session info: chrome=119.0.6045.160)
Build info: version: &#039;3.141.0&#039;, revision: &#039;2ecb7d9a&#039;, time: &#039;2018-10-31T20:09:30&#039;
System info: host: &#039;DESKTOP-LP&#039;, ip: &#039;172.19.16.1&#039;, os.name: &#039;Windows 10&#039;, os.arch: &#039;amd64&#039;, os.version: &#039;10.0&#039;, java.version: &#039;20&#039;
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 119.0.6045.160, chrome: {chromedriverVersion: 119.0.6045.105 (38c72552c5e..., userDataDir: C:\Users\SNEHAL~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:59894}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 598c2f4a178c7db5cb0902206a9b7e6e
*** Element info: {Using=xpath, value=(//a[@class=&#039;k-button k-button-icontext ob-hearing1 k-grid-hearing1&#039;])[1]}" type="org.openqa.selenium.NoSuchWindowException">
      <![CDATA[org.openqa.selenium.NoSuchWindowException: no such window: target window already closed
from unknown error: web view not found
  (Session info: chrome=119.0.6045.160)
Build info: version: '3.141.0', revision: '2ecb7d9a', time: '2018-10-31T20:09:30'
System info: host: 'DESKTOP-LP', ip: '172.19.16.1', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '20'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 119.0.6045.160, chrome: {chromedriverVersion: 119.0.6045.105 (38c72552c5e..., userDataDir: C:\Users\SNEHAL~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:59894}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 598c2f4a178c7db5cb0902206a9b7e6e
*** Element info: {Using=xpath, value=(//a[@class='k-button k-button-icontext ob-hearing1 k-grid-hearing1'])[1]}
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:67)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:484)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:323)
at org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:428)
at org.openqa.selenium.By$ByXPath.findElement(By.java:353)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:315)
at litigationAdditionalOwner.MethodPOM1.AdvancedSearchReport(MethodPOM1.java:111)
at litigationAdditionalOwner.performer.AdvancedSearch(performer.java:1355)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
    </error>
  </testcase> <!-- AdvancedSearch -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeOpen" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeOpen -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="AdvocateBill" time="0.000">
    <skipped/>
  </testcase> <!-- AdvocateBill -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeWithExistingData" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeWithExistingData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="AdvocateBill1" time="0.000">
    <skipped/>
  </testcase> <!-- AdvocateBill1 -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeWithInvalidData" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeWithInvalidData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeWithTwoMandatoryData" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeWithTwoMandatoryData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeWithEmptyFields" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeWithEmptyFields -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeClearBtn" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeClearBtn -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeSendMailWithDoc" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeSendMailWithDoc -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeSendMailWithDocInvalidFields" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeSendMailWithDocInvalidFields -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeSendMailWithDocEmptyFields" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeSendMailWithDocEmptyFields -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeUserAssignment" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeUserAssignment -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeDeleteUserAssignment" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeDeleteUserAssignment -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseOpen" time="0.000">
    <skipped/>
  </testcase> <!-- CaseOpen -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseExistingData" time="0.000">
    <skipped/>
  </testcase> <!-- CaseExistingData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseWithInvalidData" time="0.000">
    <skipped/>
  </testcase> <!-- CaseWithInvalidData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseWithTwoFieldsData" time="0.000">
    <skipped/>
  </testcase> <!-- CaseWithTwoFieldsData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseWithEmptyFields" time="0.000">
    <skipped/>
  </testcase> <!-- CaseWithEmptyFields -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseWithClearBtn" time="0.000">
    <skipped/>
  </testcase> <!-- CaseWithClearBtn -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CloseNotice" time="0.000">
    <skipped/>
  </testcase> <!-- CloseNotice -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CloseCase" time="0.000">
    <skipped/>
  </testcase> <!-- CloseCase -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="LinkNotice" time="0.000">
    <skipped/>
  </testcase> <!-- LinkNotice -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="LinkNoticeViewIcon" time="0.000">
    <skipped/>
  </testcase> <!-- LinkNoticeViewIcon -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="LinkNoticeDeleteIcon" time="0.000">
    <skipped/>
  </testcase> <!-- LinkNoticeDeleteIcon -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="LinkCase" time="0.000">
    <skipped/>
  </testcase> <!-- LinkCase -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="LinkCaseViewIcon" time="0.000">
    <skipped/>
  </testcase> <!-- LinkCaseViewIcon -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="LinkCaseDeleteIcon" time="0.000">
    <skipped/>
  </testcase> <!-- LinkCaseDeleteIcon -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeClosed" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeClosed -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseClose" time="0.000">
    <skipped/>
  </testcase> <!-- CaseClose -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="TaskOpen" time="0.000">
    <skipped/>
  </testcase> <!-- TaskOpen -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="TaskClosed" time="0.000">
    <skipped/>
  </testcase> <!-- TaskClosed -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeDocumentTab" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeDocumentTab -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeWithoutUploadDocument" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeWithoutUploadDocument -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeDocumentSearchFields" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeDocumentSearchFields -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeDocumentShareInvalidData" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeDocumentShareInvalidData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeDocumentShareWithoutData" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeDocumentShareWithoutData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeDocumentShareCloseBtn" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeDocumentShareCloseBtn -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeTaskActivityTab" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeTaskActivityTab -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="TaskActivtityDeleteResponse" time="0.000">
    <skipped/>
  </testcase> <!-- TaskActivtityDeleteResponse -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="TaskActivtityExistingData" time="0.000">
    <skipped/>
  </testcase> <!-- TaskActivtityExistingData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="TaskActivtityWithoutData" time="0.000">
    <skipped/>
  </testcase> <!-- TaskActivtityWithoutData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="TaskActivtityResponseWithoutStatus" time="0.000">
    <skipped/>
  </testcase> <!-- TaskActivtityResponseWithoutStatus -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="TaskActivtityResponseClearBtn" time="0.000">
    <skipped/>
  </testcase> <!-- TaskActivtityResponseClearBtn -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeResponseTab" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeResponseTab -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="ResponseExistingData" time="0.000">
    <skipped/>
  </testcase> <!-- ResponseExistingData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeResponseWithoutData" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeResponseWithoutData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="ResponseClearBtn" time="0.000">
    <skipped/>
  </testcase> <!-- ResponseClearBtn -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticePaymentLogTab" time="0.000">
    <skipped/>
  </testcase> <!-- NoticePaymentLogTab -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="PaymentLogwithExistingData" time="0.000">
    <skipped/>
  </testcase> <!-- PaymentLogwithExistingData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticePaymentWithoutData" time="0.000">
    <skipped/>
  </testcase> <!-- NoticePaymentWithoutData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeExternalLawyerTab" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeExternalLawyerTab -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CriteriaInvalidData" time="0.000">
    <skipped/>
  </testcase> <!-- CriteriaInvalidData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CriteriaExistingData" time="0.000">
    <skipped/>
  </testcase> <!-- CriteriaExistingData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CriteriaWithoutData" time="0.000">
    <skipped/>
  </testcase> <!-- CriteriaWithoutData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeAuditLogTab" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeAuditLogTab -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeDocViewandDownload" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeDocViewandDownload -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseDocumentTab" time="0.000">
    <skipped/>
  </testcase> <!-- CaseDocumentTab -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseWithoutUploadDocument" time="0.000">
    <skipped/>
  </testcase> <!-- CaseWithoutUploadDocument -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseDocumentEmptyFields" time="0.000">
    <skipped/>
  </testcase> <!-- CaseDocumentEmptyFields -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseDocumentSearchFields" time="0.000">
    <skipped/>
  </testcase> <!-- CaseDocumentSearchFields -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseDocumentShareInvalidData" time="0.000">
    <skipped/>
  </testcase> <!-- CaseDocumentShareInvalidData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseDocumentShareWithoutData" time="0.000">
    <skipped/>
  </testcase> <!-- CaseDocumentShareWithoutData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseDocumentShareCloseBtn" time="0.000">
    <skipped/>
  </testcase> <!-- CaseDocumentShareCloseBtn -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseSendMailWithDoc" time="0.000">
    <skipped/>
  </testcase> <!-- CaseSendMailWithDoc -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseSendMailWithDocInvalidFields" time="0.000">
    <skipped/>
  </testcase> <!-- CaseSendMailWithDocInvalidFields -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseSendMailWithEmptyFields" time="0.000">
    <skipped/>
  </testcase> <!-- CaseSendMailWithEmptyFields -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseTaskActivityTab" time="0.000">
    <skipped/>
  </testcase> <!-- CaseTaskActivityTab -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseTaskActivityWithoutData" time="0.000">
    <skipped/>
  </testcase> <!-- CaseTaskActivityWithoutData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseTaskActivitywithExistingData" time="0.000">
    <skipped/>
  </testcase> <!-- CaseTaskActivitywithExistingData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseTaskActivtityResponseWithoutStatus" time="0.000">
    <skipped/>
  </testcase> <!-- CaseTaskActivtityResponseWithoutStatus -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseTaskActivtityResponseClearBtn" time="0.000">
    <skipped/>
  </testcase> <!-- CaseTaskActivtityResponseClearBtn -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseHearingTab" time="0.000">
    <skipped/>
  </testcase> <!-- CaseHearingTab -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseExistingHearingData" time="0.000">
    <skipped/>
  </testcase> <!-- CaseExistingHearingData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseWithoutHearingData" time="0.000">
    <skipped/>
  </testcase> <!-- CaseWithoutHearingData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseHearingInvalidDate" time="0.000">
    <skipped/>
  </testcase> <!-- CaseHearingInvalidDate -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseHearingClearBtn" time="0.000">
    <skipped/>
  </testcase> <!-- CaseHearingClearBtn -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseOrderTab" time="0.000">
    <skipped/>
  </testcase> <!-- CaseOrderTab -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseOrderExistingData" time="0.000">
    <skipped/>
  </testcase> <!-- CaseOrderExistingData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseOrderWithoutData" time="0.000">
    <skipped/>
  </testcase> <!-- CaseOrderWithoutData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseOrderwithClearBtn" time="0.000">
    <skipped/>
  </testcase> <!-- CaseOrderwithClearBtn -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseAdvocateBillTab" time="0.000">
    <skipped/>
  </testcase> <!-- CaseAdvocateBillTab -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="StatusPayment" time="0.000">
    <skipped/>
  </testcase> <!-- StatusPayment -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="StatusPaymentWithExistingData" time="0.000">
    <skipped/>
  </testcase> <!-- StatusPaymentWithExistingData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="StatusPaymentWithoutdata" time="0.000">
    <skipped/>
  </testcase> <!-- StatusPaymentWithoutdata -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseStatuswithEmptyFields" time="0.000">
    <skipped/>
  </testcase> <!-- CaseStatuswithEmptyFields -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="ExternalLawyer" time="0.000">
    <skipped/>
  </testcase> <!-- ExternalLawyer -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseExternalLawyerCriteria" time="0.000">
    <skipped/>
  </testcase> <!-- CaseExternalLawyerCriteria -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseExistingCriteria" time="0.000">
    <skipped/>
  </testcase> <!-- CaseExistingCriteria -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseCriteriaInvalidData" time="0.000">
    <skipped/>
  </testcase> <!-- CaseCriteriaInvalidData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseCriteriaWithoutData" time="0.000">
    <skipped/>
  </testcase> <!-- CaseCriteriaWithoutData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="Auditlog" time="0.000">
    <skipped/>
  </testcase> <!-- Auditlog -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="MyDocument" time="0.000">
    <skipped/>
  </testcase> <!-- MyDocument -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="ShareCaseDocument" time="0.000">
    <skipped/>
  </testcase> <!-- ShareCaseDocument -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="ShareNoticeDocument" time="0.000">
    <skipped/>
  </testcase> <!-- ShareNoticeDocument -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="ShareTaskDocument" time="0.000">
    <skipped/>
  </testcase> <!-- ShareTaskDocument -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="MyReports" time="0.000">
    <skipped/>
  </testcase> <!-- MyReports -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="MoreReports" time="0.000">
    <skipped/>
  </testcase> <!-- MoreReports -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="MyReminder" time="0.000">
    <skipped/>
  </testcase> <!-- MyReminder -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="ReminderWithoutData" time="0.000">
    <skipped/>
  </testcase> <!-- ReminderWithoutData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="ImportUtilityWithoutData" time="0.000">
    <skipped/>
  </testcase> <!-- ImportUtilityWithoutData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="ImportUtilityInvalidData" time="0.000">
    <skipped/>
  </testcase> <!-- ImportUtilityInvalidData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="ImportUtilityTwoManadtoryFileds" time="0.000">
    <skipped/>
  </testcase> <!-- ImportUtilityTwoManadtoryFileds -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="AdvancedSearchworkspace" time="0.000">
    <skipped/>
  </testcase> <!-- AdvancedSearchworkspace -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="AdvancedSearchDoc" time="0.000">
    <skipped/>
  </testcase> <!-- AdvancedSearchDoc -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="AdvancedSearchShareCaseDocument" time="0.000">
    <skipped/>
  </testcase> <!-- AdvancedSearchShareCaseDocument -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="AdvancedSearchShareNoticeDocument" time="0.000">
    <skipped/>
  </testcase> <!-- AdvancedSearchShareNoticeDocument -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="AdvancedSearchShareTaskDocument" time="0.000">
    <skipped/>
  </testcase> <!-- AdvancedSearchShareTaskDocument -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CriticalDocuments" time="0.000">
    <skipped/>
  </testcase> <!-- CriticalDocuments -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CriticalDocuments1" time="0.000">
    <skipped/>
  </testcase> <!-- CriticalDocuments1 -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseHearing" time="0.000">
    <skipped/>
  </testcase> <!-- CaseHearing -->
  <system-out/>
</testsuite> <!-- litigationAdditionalOwner.performer -->
