<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitReportReporter -->
<testsuite hostname="TRPL-PUN-0115" failures="0" tests="34" name="litigationAdditionalOwner.performer" time="14.382" errors="1" timestamp="2024-02-14T10:07:33 IST" skipped="33">
  <testcase classname="litigationAdditionalOwner.performer" name="Login" time="14.382">
    <error message="The path to the driver executable must be set by the webdriver.opera.driver system property; for more information, see https://github.com/operasoftware/operachromiumdriver. The latest version can be downloaded from https://github.com/operasoftware/operachromiumdriver/releases" type="java.lang.IllegalStateException">
      <![CDATA[java.lang.IllegalStateException: The path to the driver executable must be set by the webdriver.opera.driver system property; for more information, see https://github.com/operasoftware/operachromiumdriver. The latest version can be downloaded from https://github.com/operasoftware/operachromiumdriver/releases
at com.google.common.base.Preconditions.checkState(Preconditions.java:847)
at org.openqa.selenium.remote.service.DriverService.findExecutable(DriverService.java:125)
at org.openqa.selenium.opera.OperaDriverService.access$000(OperaDriverService.java:35)
at org.openqa.selenium.opera.OperaDriverService$Builder.findDefaultExecutable(OperaDriverService.java:141)
at org.openqa.selenium.remote.service.DriverService$Builder.build(DriverService.java:346)
at org.openqa.selenium.opera.OperaDriverService.createDefaultService(OperaDriverService.java:85)
at org.openqa.selenium.opera.OperaDriver.<init>(OperaDriver.java:115)
at login.Login.BrowserSetup(Login.java:49)
at litigationAdditionalOwner.performer.Login(performer.java:71)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:385)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:321)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:700)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:527)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
    </error>
  </testcase> <!-- Login -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="MyDocument" time="0.000">
    <skipped/>
  </testcase> <!-- MyDocument -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="ShareCaseDocument" time="0.000">
    <skipped/>
  </testcase> <!-- ShareCaseDocument -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="ShareNoticeDocument" time="0.000">
    <skipped/>
  </testcase> <!-- ShareNoticeDocument -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="ShareTaskDocument" time="0.000">
    <skipped/>
  </testcase> <!-- ShareTaskDocument -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="DocumentNoticeFilter" time="0.000">
    <skipped/>
  </testcase> <!-- DocumentNoticeFilter -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="DocumentCaseFilter" time="0.000">
    <skipped/>
  </testcase> <!-- DocumentCaseFilter -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="DocumentTaskFilter" time="0.000">
    <skipped/>
  </testcase> <!-- DocumentTaskFilter -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="AdvancedSearchDoc" time="0.000">
    <skipped/>
  </testcase> <!-- AdvancedSearchDoc -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="AdvancedSearchShareCaseDocument" time="0.000">
    <skipped/>
  </testcase> <!-- AdvancedSearchShareCaseDocument -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="AdvancedSearchShareNoticeDocument" time="0.000">
    <skipped/>
  </testcase> <!-- AdvancedSearchShareNoticeDocument -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="AdvancedSearchShareTaskDocument" time="0.000">
    <skipped/>
  </testcase> <!-- AdvancedSearchShareTaskDocument -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CriticalDocuments" time="0.000">
    <skipped/>
  </testcase> <!-- CriticalDocuments -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CriticalDocuments1" time="0.000">
    <skipped/>
  </testcase> <!-- CriticalDocuments1 -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="MyReports" time="0.000">
    <skipped/>
  </testcase> <!-- MyReports -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="MoreReports" time="0.000">
    <skipped/>
  </testcase> <!-- MoreReports -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="ReportFilter" time="0.000">
    <skipped/>
  </testcase> <!-- ReportFilter -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="ReportCaseFilter" time="0.000">
    <skipped/>
  </testcase> <!-- ReportCaseFilter -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="ReportTaskFilter" time="0.000">
    <skipped/>
  </testcase> <!-- ReportTaskFilter -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="AdvancedSearch" time="0.000">
    <skipped/>
  </testcase> <!-- AdvancedSearch -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="MyReminder" time="0.000">
    <skipped/>
  </testcase> <!-- MyReminder -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="ReminderWithoutData" time="0.000">
    <skipped/>
  </testcase> <!-- ReminderWithoutData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="ImportUtility" time="0.000">
    <skipped/>
  </testcase> <!-- ImportUtility -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="ImportUtilityWithoutData" time="0.000">
    <skipped/>
  </testcase> <!-- ImportUtilityWithoutData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="ImportUtilityInvalidData" time="0.000">
    <skipped/>
  </testcase> <!-- ImportUtilityInvalidData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="ImportUtilityTwoManadtoryFileds" time="0.000">
    <skipped/>
  </testcase> <!-- ImportUtilityTwoManadtoryFileds -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseUpdationImportUtility" time="0.000">
    <skipped/>
  </testcase> <!-- CaseUpdationImportUtility -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseUpdationUploadEmtyFile" time="0.000">
    <skipped/>
  </testcase> <!-- CaseUpdationUploadEmtyFile -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseUpdationUploadInvalidData" time="0.000">
    <skipped/>
  </testcase> <!-- CaseUpdationUploadInvalidData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="CaseUpdationUploadInvalidFile" time="0.000">
    <skipped/>
  </testcase> <!-- CaseUpdationUploadInvalidFile -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeUpdation" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeUpdation -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeUpdationUploadEmtyFile" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeUpdationUploadEmtyFile -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeUpdationUploadInvalidData" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeUpdationUploadInvalidData -->
  <system-out/>
  <testcase classname="litigationAdditionalOwner.performer" name="NoticeUpdationUploadInvalidFile" time="0.000">
    <skipped/>
  </testcase> <!-- NoticeUpdationUploadInvalidFile -->
  <system-out/>
</testsuite> <!-- litigationAdditionalOwner.performer -->
